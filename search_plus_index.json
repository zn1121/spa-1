{"./":{"url":"./","title":"简介","keywords":"","body":"SPA 富应用开发 本电子书含 SPA 富应用开发课程的全部教学资料，包括：课程大纲、学习交流 QQ 群、课程视频、通关任务以及示例代码。 课程大纲 SPA 富应用开发课程大纲 学习交流群 王顶老师的 QQ 学习交流群：301862163，加群时请报上自己的真实姓名，以及正在学习的课程内容。 课程视频 最近好像比较流行在 B 站看课程视频，视频不全，看着玩吧。观看视频 通关任务 按课程讲授的顺序，排列在电子书左侧导航中，所有通关任务对应有参考的示例代码，请见下面 spa-demo 仓库的链接。 示例代码 rectangle 矩形计算器是 SPA 课程的第一个大作业，覆盖了课程的前半部分内容。用户输入矩形的长度和宽度，程序计算出矩形的面积和周长。应用程序的开发涉及到自动化构建的静态代码检查、单元测试和性能优化，以及数据合法性校验等技术。 grunt-demo Grunt 工具的自动化构建示例仓库，包括各种构建任务的 Gruntfile.js 构建脚本代码。 spa-demo 所有课程上的小的 Demo 示例代码，整个页面是个单页应用。 jsnotepad 覆盖课程后半部分内容，实践界面组件化开发思想的一个较复杂的案例。包括五个对话框组件的封装，一个列表控件的封装以及三个界面组件（菜单栏、编辑器和状态栏）的封装。以及自动化构建。 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch01-introduction.html":{"url":"chapters/ch01-introduction.html","title":"第一章：课程说明","keywords":"","body":"第 1 章：课程说明 阅读参考资料 SPA 维基百科定义 RIA 维基百科定义 Web APP 维基百科定义 浅谈前端集成解决方案 JavaScript 浮点运算精度解决方案 jQuery API 中文版 IBM web 开发者中心 搭建开发环境 SPA 富应用开发课程所使用的开发环境是基于 CentOS 7 Linux 操作系统的，纯命令行模式的，Node.js 的前端开发环境。首先需要安装 CentOS 7 Linux 虚拟机，其次安装 Node.js 开发环境，最后安装前后端开发辅助工具。具体安装步骤见下面的两种方式： 方式一：导入虚拟机 下载并安装 vmware workstation Pro 12+（已经安装 vmware workstation，略过此任务） 下载并导入 mocha.ova 开发环境 下载并安装 xshell 6 配置 mocha 虚拟机的网卡 IP 地址 配置 mocha 虚拟机的 git 参数，包括：user.name 和 user.email 具体操作请参考：教学视频 上述步骤完成后，需要升级 mocha 虚拟机环境，请按这个文档操作 方式二：从头安装 安装步骤请参考：Node.js 开发环境搭建 安装 CentOS 虚拟机，请参考：教学视频 矩形计算器 v0.1 基本要求： 在 GitHub 上创建 rectangle 项目仓库 根据输入的矩形的长度和宽度计算矩形的周长和面积 使用 H5 内置控件实现 解决浮点舍入误差的问题 不用考虑数据合法性校验 支持科学计数法的数据计算 将代码推送到 GitHub 的 rectangle 项目仓库 将代码通过 github pages 功能发布上线 示例参考： 矩形计算器 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch02-build-automation.html":{"url":"chapters/ch02-build-automation.html","title":"第二章：自动化构建","keywords":"","body":"第 2 章：自动化构建 阅读参考资料 自动化构建：https://en.wikipedia.org/wiki/Build_automation 持续集成：https://en.wikipedia.org/wiki/Continuous_integration Grunt：https://www.gruntjs.net/ Travis-CI: https://travis-ci.org/ Google PageSpeed Insights: https://developers.google.com/speed/pagespeed/insights/ 站长工具：http://tool.chinaz.com/ 在线电子书 要求： 在 GitHub 上创建 book 仓库 在 book 仓库的 master 分支放置电子书的章节和目录的 MarkDown 文档 在 book 仓库的 gh-pages 分支放置 gitbook build 后的 HTML 文件 电子书的前两章用手动构建，并完成第一次发布上线 用 Chrome 浏览器查看在线电子书 增加电子书的第三章，继续使用手动构建，并完成第二次发布上线 用 Chrome 浏览器查看更新后的电子书 体验手动构建的繁琐，考虑哪些构建过程可以自动化完成 阅读 Travis-CI gh-gage 自动部署文章 配置电子书 book 仓库启用 Travis-CI 获取个人 GitHub 账户开发者 API token 配置 book 仓库的 Travis-CI 环境变量 在 book 仓库的 master 分支，添加 .travis.yml 和 package.json 文件 在 book 仓库增加第四章的 MarkDown 文件 将 master 分支的变更推送 GitHub 服务器 在 Travis-CI 网站查看自动构建脚本执行的情况 用 Chrome 浏览器查看自动构建后的电子书 示例参考： 实验手册在线电子书 实验手册电子书仓库 LESS 预处理 要求： 阅读 grunt-contrib-less 插件文档 在 GitHub 上创建 grunt-demo 仓库 在 grunt-demo 仓库添加 less 分支 在 less 分支添加 index.html 页面和 LESS 样式 npm 安装 grunt 和 grunt-contrib-less 插件 添加 Gruntfile.js，实现 LESS 预处理 执行自动化任务，观察自动化构建执行的效果 示例参考： LESS 预处理 HTML 静态代码检查 要求： 阅读 grunt-htmlhint 插件文档 阅读 htmlhint 规则文档 在 grunt-demo 仓库添加 htmlhint 分支 在 htmlhint 分支复制 rectangle 仓库的 index.html、rectangle.css 和 rectangle.js 三个代码文件 添加 .htmlhintrc 配置文件 npm 安装 grunt 和 grunt-htmlhint 插件 添加 Gruntfile.js，实现 HTML 代码静态代码检查 执行自动化任务，观察自动化构建执行的效果 示例参考： HTML 静态代码检查 CSS 静态代码检查 要求： 阅读 grunt-contrib-csslint 插件文档 阅读 csslint 规则文档 在 grunt-demo 仓库添加 csslint 分支 在 csslint 分支复制 rectangle 仓库的 index.html、rectangle.css 和 rectangle.js 三个代码文件 添加 .csslintrc 配置文件 npm 安装 grunt 和 grunt-contrib-csslint 插件 添加 Gruntfile.js，实现 CSS 代码静态代码检查 执行自动化任务，观察自动化构建执行的效果 示例参考： CSS 静态代码检查 JavaScript 静态代码检查 要求： 阅读 grunt-eslint 插件文档 阅读 eslint 规则文档 在 grunt-demo 仓库添加 eslint 分支 在 eslint 分支复制 rectangle 仓库的 index.html、rectangle.css 和 rectangle.js 三个代码文件 添加 .eslintrc.json 配置文件 npm 安装 grunt 和 grunt-eslint 插件 添加 Gruntfile.js，实现 JavaScript 代码静态代码检查 执行自动化任务，观察自动化构建执行的效果 示例参考： JavaScript 静态代码检查 矩形计算器 v0.2 要求： 切换到 rectangle 项目仓库 npm 安装 grunt 和相应的 grunt 插件 添加自动化构建脚本 Gruntfile.js 对 HTML、CSS 和 JavaScript 代码实现静态代码检查 添加 Travis CI 配置脚本，实现代码在 gh-pages 分支的自动发布 用 chrome 浏览器查看自动化构建并发布的 rectangle 应用 示例参考： 矩形计算器 v0.2 代码静态检查 阅读单元测试参考资料 单元测试准则：https://github.com/yangyubo/zh-unit-testing-guidelines/blob/master/readme.rst 编写可测试的 JavaScript 代码：http://blog.jobbole.com/67560/ JavaScript 与 QA 工程师（理论篇）：https://github.com/hubvue/nota/issues/26 自动化、跨浏览器的 JavaScript 单元测试：https://www.zcfy.cc/article/learning-how-to-set-up-automated-cross-browser-javascript-unit-testing-mdash-philip-walton Mocha 官网：https://mochajs.org/ Mocha 中文文档：https://segmentfault.com/a/1190000011362879 Chai 官网：https://www.chaijs.com/ Istanbul 官网：https://istanbul.js.org/ Istanbul 教程：http://www.ruanyifeng.com/blog/2015/06/istanbul.html Sinon 官网：https://sinonjs.org/ Sinon 指南：https://www.zcfy.cc/article/sinon-tutorial-javascript-testing-with-mocks-spies-stubs-422.html 服务端代码单元测试 要求： 阅读 grunt-mocha-cli 插件文档 阅读 grunt-mocha-istanbul 插件文档 在 grunt-demo 仓库，创建 mocha-be 分支 创建被测模块 add.js，被测模块暴露出 add 方法，实现 z = x + y 对 add.js 模块，编写 mocha 单元测试脚本 执行 mocha 命令，运行单元测试，查看单元测试输出结果 进行代码覆盖率测试 查看代码覆盖率报告 添加 grunt 插件支持，实现 grunt mocha 单元测试 添加 grunt 插件支持，实现 grunt 代码覆盖率测试 示例参考： 服务端单元测试 entropy 的单元测试 要求： 在 grunt-demo 仓库，创建 entropy 分支 获取 entropy.js 被测程序 entropy 程序的功能描述，请参考 Node.js 大作业 重构 entropy.js 代码，使其易于实施单元测试 添加 mocha 单元测试代码 运行 grunt mocha 单元测试，查看单元测试输出结果 查看代码覆盖率报告 示例参考： entropy 的单元测试 前端代码单元测试 要求： 阅读 grunt-mocha 插件文档 在 grunt-demo 仓库，创建 mocha-fe 分支 将 rectangle 仓库中的 index.html、rectangle.js 和 rectangle.css 三个代码文件复制到当前项目仓库的 mocha-fe 分支下 重构 rectangle.js 代码，使其易于实施单元测试 添加 mocha 单元测试代码 运行 grunt mocha 单元测试，查看单元测试输出结果 示例参考： 前端代码单元测试 矩形计算器 v0.3 要求： 切换到 rectangle 项目仓库 重构 rectangle.js 代码，使其易于实施单元测试 添加 Mocha + Chai 单元测试代码 在自动化构建脚本 Gruntfile.js 中添加单元测试构建任务 将静态代码检查和单元测试任务添加到 npm test 脚本中 添加 Travis CI 配置脚本，实现代码在 gh-pages 分支的自动发布 用 chrome 浏览器查看自动化构建并发布的 rectangle 应用 示例参考： 矩形计算器 v0.3 单元测试 压缩 HTML 代码 要求： 阅读 grunt-contrib-htmlmin 插件文档 在 grunt-demo 仓库，创建 htmlmin 分支 将 rectangle 仓库中的 HTML、CSS 和 JavaScript 代码文件复制到当前项目仓库的 htmlmin 分支下 npm 安装 grunt 和 grunt-contrib-htmlmin 插件 添加 Gruntfile.js，实现 HTML 代码压缩 执行自动化任务，观察自动化构建执行的效果 示例参考： 压缩 HTML 代码 压缩 CSS 代码 要求： 阅读 grunt-contrib-cssmin 插件文档 在 grunt-demo 仓库，创建 cssmin 分支 将 rectangle 仓库中的 HTML、CSS 和 JavaScript 代码文件复制到当前项目仓库的 htmlmin 分支下 npm 安装 grunt 和 grunt-contrib-cssmin 插件 添加 Gruntfile.js，实现 CSS 代码压缩 执行自动化任务，观察自动化构建执行的效果 示例参考： 压缩 CSS 代码 压缩 JavaScript 代码 要求： 阅读 grunt-contrib-uglify 插件文档 在 grunt-demo 仓库，创建 uglify 分支 在项目目录下创建 js 目录，并切换到 js 目录 运行命令 wget https://sample.wangding.in/spa/jquery.js 下载 jquery.js 文件 npm 安装 grunt 和 grunt-contrib-uglify 插件 添加 Gruntfile.js，实现 JavaScript 代码压缩 执行自动化任务，观察自动化构建执行的效果 示例参考： 压缩 JavaScript 代码 矩形计算器 v0.4 要求： 切换到 rectangle 项目仓库 在自动化构建脚本 Gruntfile.js 中添加代码压缩构建任务 将代码压缩构建任务编写到 Travis CI 配置脚本中 确保自动发布的代码是压缩优化后的代码 推送修改的代码到 GitHub 仓库 用 chrome 浏览器查看自动化构建并发布的 rectangle 应用 验证应用代码是压缩后的代码 示例参考： 矩形计算器 v0.4 实现代码压缩发布 压缩图片 要求： 阅读 grunt-contrib-imagemin 插件文档 在 grunt-demo 仓库，添加 imagemin 分支 在当前项目目录下创建 images 目录，切换到 images 目录 运行命令 wget https://sample.wangding.in/spa/images.tar 下载 images.tar 文件 运行命令 tar -xf images.tar 解压图片文件 运行命令 rm images.tar 删除压缩文件 npm 安装 grunt 和 grunt-contrib-imagemin 插件 添加 Gruntfile.js，实现图片压缩 执行自动化任务，观察自动化构建执行的效果 示例参考： 压缩图片 打包合并 要求： 阅读 grunt-contrib-concat 插件文档 在 grunt-demo 仓库，添加 concat 分支 复制 rectangle v0.4 项目仓库的 HTML、CSS 和 JavaScript 代码 添加 Gruntfile.js，实现对 JavaScript 代码的打包合并 执行自动化任务，观察自动化构建执行的效果 示例参考： 打包合并 合并子图 要求： 阅读 grunt-spritesmith 插件文档 在 grunt-demo 仓库，添加 sprite 分支 在当前项目目录下创建 images 目录，切换到 images 目录 运行命令 wget https://sample.wangding.in/spa/icons.tar，下载 icons.tar 文件 运行命令 tar -xf icons.tar，解压 icons.tar 运行命令 rm icons.tar 删除压缩文件 添加 Gruntfile.js，实现子图合并 执行自动化任务，观察自动化构建执行的效果 在 dist 目录下，添加 index.html 文件，引用生成后的 CSS 文件 在 dist 目录下，启动 web 静态文件服务 在浏览器中查看 index.html 页面效果 示例参考： 合并子图 HTTP 接口测试 要求： 阅读 grunt-run 插件文档 在 grunt-demo 仓库，添加 http-api-test 分支 添加 app.js 脚本代码，实现矩形计算器的 HTTP API 接口 接口 URL：http://localhost:8080/rectangle?width=20&height=20 接口返回信息格式：{'code': 200, 'reason': '查询成功', result: {'area': 400, 'perimeter': 80}} npm 安装 grunt、chai、grunt-mocha-cli 和 grunt-run 插件 创建 test 文件夹 在 test 文件夹，添加接口测试自动化测本代码 测试矩形计算器接口 添加 Gruntfile.js，实现接口 Web 服务的启动和关闭 实现对矩形计算器 HTTP API 接口的自动化测试 运行 grunt 命令，观察自动化测试的效果 示例参考： HTTP 接口测试 矩形计算器 v0.5 要求： 阅读 grunt-contrib-copy 插件文档 阅读 grunt-contrib-clean 插件文档 阅读 grunt-usemin 插件文档 npm 安装 grunt-contrib-copy，grunt-contrib-clean，grunt-usemin 三个插件 用 grunt 对 rectangle.js 和 calc.js 两个脚本文件打包后压缩为 dist/bundle.min.js 用 grunt 自动修改 index.html 文件，使用 bundle.min.js 用 grunt 清理构建过程中的临时文件 增加网站图标，Chrome 开发者工具的控制台窗口，不要输出错误 添加页面初始焦点，初始焦点设置为第一个文本框 计算结果文本框不可编辑 设备自适应，页面在手机上可以正常显示 增加必填字段提示 不用考虑数据合法性校验 将 master 分支的代码变更推送 GitHub 用 Chrome 浏览器观察自动化构建并发布的 rectangle 应用 自动化构建包括：静态代码检查、单元测试和代码打包压缩优化 示例参考： 矩形计算器 v0.5 增强用户体验 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch03-ui-introduction.html":{"url":"chapters/ch03-ui-introduction.html","title":"第三章：UI 概述","keywords":"","body":"第 3 章：UI 概述 阅读参考资料 如何为桌面应用程序设计更好的用户体验 GUI 窗体部件 简洁明了的优秀 UI 设计原则：第一篇、第二篇、第三篇、第四篇 九张图回顾 Web 设计的 25 年历史 打造出色 UI 的七个法则：上篇、下篇 改善UI视觉体验的7个小技巧 不规则窗体案例 界面视觉设计要素：字体篇 色彩背后的心理学 人类是如何认知颜色的 小图标大学问 UI 设计原则 UI 设计原则 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch04-h5-buildin-widget.html":{"url":"chapters/ch04-h5-buildin-widget.html","title":"第四章：H5 内置控件","keywords":"","body":"第 4 章：H5 内置控件 阅读参考资料 文本框类 text textarea email tel password number search url 按钮类 button button image checkbox radio reset submit 弹框类 alert() prompt() confirm() 列表类 select option optgroup datalist option 时间日期类 time date month week datetime datetime-local 其他 label range progress color file hidden form fieldset legend output 作业统一说明 如果没有特别说明，后续任务代码放到 spa 仓库下 spa 仓库需要同步到 github 远程仓库 spa 仓库需要用 grunt 进行自动化构建 实现 HTML、CSS、JavaScript 静态代码检查构建任务 实现 HTML、CSS、JavaScript 压缩构建任务 如有必要，添加单元测试构建任务 使用 Travis-CI 自动发布代码到 gh-pages 分支 执行命令 wget https://sample.wangding.in/spa/spa.tar 获取仓库初始代码 定时器按钮 基本要求： 创建 10-timer-button 目录 使用 H5 内置控件实现 按钮初始状态为禁用 禁用状态下，点击按钮，不会有任何响应 倒计时 6 秒 每隔一秒按钮文字显示剩余秒数 倒计时结束后，按钮状态为启用 启用状态下，点击按钮，会弹出 alert 弹框 示例参考： 定时器按钮 密码可见 基本要求： 创建 11-password-visual 目录 使用 H5 内置控件实现 在文本框中输入任意字符，并不显示输入的字符，而显示为“点”（隐藏密码） 文本框的右侧有眼睛闭合的图标 当鼠标移到眼睛图标时 密码框中的密码可以正常显示 眼睛关闭的图标变成眼睛睁开的图标 当鼠标移出眼睛图标时 密码框中的密码不可见 眼睛睁开的图标变成眼睛闭合的图标 密码框设置为初始焦点 示例参考： 密码可见 滑杆 基本要求： 创建 12-range 目录 使用 H5 内置控件实现 用滑杆控件输入自己的年龄，滑杆的最小值为 0，最大值为 100 滑块拖动后，下方显示年龄数据 初始滑块位于最左边，下方的年龄数据为 0 岁 示例参考： 范围控件 进度条 基本要求： 创建 13-progress 目录 使用 H5 内置控件实现 用进度条控件模拟下载文件的进度 进度条控件下方有三个按钮：开始、暂停和重置 开始按钮点击后，进度条显示下载进度 暂停按钮点击后，下载进度暂停 重置按钮点击后，下载进度条恢复初始状态 多次点击开始按钮，点击一次暂停按钮，要求进度条能够暂停 示例参考： 进度条 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch05-validation.html":{"url":"chapters/ch05-validation.html","title":"第五章：数据合法性校验","keywords":"","body":"第 5 章：数据合法性校验 阅读参考资料 表单验证 表单级校验 基本要求： 在 spa 仓库创建 20-form-validation 目录 复制 rectangle 仓库 v0.5 版本的代码 做以下几个方面的校验： 数据不能为空 数据类型不对，数据不能是字符串，而应该是数字 数据的取值范围错误，宽度和高度都应该大于零 Tab 键进行焦点切换时不进行数据合法性验证 键盘输入字符时不对非法字符进行判断，不拦截非法字符 只有点击计算按钮时才进行数据合法性校验 出现验证错误时，只报告第一个验证的错误 只有数据验证都通过之后，才计算矩形的周长和面积 参考示例： 表单级验证 矩形计算器 v1.0 基本要求： 进一步完善 rectangle 仓库代码 对矩形的宽度和高度两个字段进行字段级数据合法性校验 数据合法性校验的方面跟表单级验证相同 对非法数据提供清晰明确的错误提示 初始焦点在宽度文本框上，按 Tab 键时，进行数据合法性校验 如果数据不合法，Tab 键不移动到下一个文本框 如果宽度和高度是错误的（上面三种错误的任意一种），点击计算按钮（可以点击多次），不应该计算出周长和面积 对数据合法性校验模块增加单元测试 示例参考： 矩形计算器 v1.0 字段级校验 矩形计算器 v1.1 基本要求： 进一步完善 rectangle 仓库代码 在字段级验证的基础上添加字符级验证 合法的字符包括：0~9 十个数字、小数点、负号和科学计数法的 e 和 E 非法字符，除了上面合法字符以外的字母和标点符号 在矩形的宽度和高度输入框中输入非法字符，非法字符不会出现在文本框中 对字符过滤模块增加单元测试 参考示例： 矩形计算器 v1.1 字符级校验 H5 校验 基本要求： 在 spa 仓库创建 21-h5-validation 目录 复制 rectangle 仓库 v1.0 版本的代码 利用 H5 内置控件提供的数据合法性校验功能 实现字段级和字符级数据合法性校验 通往 H5 验证的伪类来提供数据验证与否的标记 参考示例： H5 校验 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch06-third-part-component.html":{"url":"chapters/ch06-third-part-component.html","title":"第六章：第三方组件","keywords":"","body":"第 6 章：第三方组件 阅读参考资料 jQuery UI jQuery EasyUI LayUI YUI w2ui jQuery 官方插件库 jQuery 插件库 二进熵函数 基本要求： 在 spa 仓库创建 31-echart 目录 使用 EChart 组件绘制二进熵函数曲线 二进熵函数：H(p) = -p*log(p)-(1-p)log(1-p) 二进熵函数中 p 是概率，取值范围是 0~1 之间 二进熵函数的对数底数是 2 参考资料： EChart 的官方文档 示例参考： 二进熵函数 百度地图 基本要求： 在 spa 仓库创建 32-map 目录 展示百度地图 百度地图的中心点为河北师大软件学院 在地图上标注 505 教室 信息窗口中显示课程名字、地点、时间和老师的头像信息 软件学院的地图坐标是：114.529963, 38.003679 参考资料： 百度地图官方网站 百度地图核心类 百度地图示例 示例参考： 百度地图 语法高亮 基本要求： 在 spa 仓库创建 33-hightlight 目录 使用 behave 插件让 textarea 文本框具有 IDE 的代码编辑功能 点击添加按钮后 textarea 文本框中的代码添加到页面上 页面上的代码呈现出语法高亮 页面上的代码可以删除 参考资料： behave.js highlight.js 示例参考： 语法高亮 Excel 表格 基本要求： 在 spa 仓库创建 34-excel 目录 使用 handsontable 插件在页面上显示一个 Excel 表格 表格提供上下文菜单 在页面上显示一个有意义的数据 参考资料： handsontable 示例参考： Excel 表格 数学公式编辑（选做） 基本要求： 在 spa 仓库创建 35-formula 目录 使用 Mathquill 插件在页面上实现一个数学公式编辑功能 通过添加按钮将数学公式编辑框中的数学公式添加到页面上 参考资料： Mathquill 示例参考： 数学公式编辑 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch07-diy-ui-component.html":{"url":"chapters/ch07-diy-ui-component.html","title":"第七章：自定义 UI 组件","keywords":"","body":"第 7 章：自定义 UI 组件 阅读参考资料 前端工程：基础篇 构建表单小工具 jspaint web app 仓库 BEM 入门 RequireJS 官网 RequireJS 的用法 前端模块管理器简介 JavaScript 文件加载 阿当大话西游之WEB组件 定时器按钮组件 基本要求： 在 spa 仓库创建 41-timer-button 目录 封装定时器按钮组件 封装后的代码文件包括：一个 js 文件和一个 css 文件 定时器按钮支持两种应用场景 场景一：初始状态禁用，倒计时后，按钮启用，启用后按钮可以点击，点击后按钮一直处于启用状态 场景二：初始状态启用，点击按钮后，按钮禁用，倒计时，倒计时结束后，按钮启用，循环往复 创建定时器按钮时，可以通过参数初始化： container：创建定时器按钮的容器 tLength：定时器时长 enable：定时器按钮的初始状态 title：定时器按钮的文字 定时器按钮启用状态，被点击时，执行个性化的事件处理，而不是写死在组件中的事件处理 编写定时器按钮的测试页面 示例参考： 定时器按钮 密码可见组件 基本要求： 在 spa 仓库创建 42-password-visual 目录 封装密码可见组件 封装后的代码文件包括：一个 js 文件和一个 css 文件 创建密码可见组件时，可以通过参数初始化： container: 创建密码可见组件的容器 密码可见组件暴露一个 getPwd 方法，返回密码明文 编写密码可见组件的测试页面 示例参考： 密码可见 jsnotepad 转到对话框 基本要求： 在 GitHub 上创建 jsnotepad 项目仓库 实现 grunt 自动化构建，包括：静态代码检查、单元测试和性能优化构建任务 打开 win10 notepad 程序，调出转到对话框 把转到对话框屏幕截图，测量对话框中各个控件的位置和尺寸数据，参考下图： 图：转到对话框尺寸标注，王顶，408542507@qq.com 根据上面测量的数据，编写转到对话框组件的 CSS 样式表 后续作业任务中的 jsnotepad 界面组件的样式表文件的编写，于此类似 实现转到对话框 转到对话框的样式以及功能参考 win10 的记事本程序 转到对话框要实现字符级和集中数据合法性校验 错误信息气泡提示框的实现，请参考：制作 CSS 气泡框 转到对话框要实现参数初始化 编写测试页面，测试转到对话框，如下图所示： 图：转到对话框组件测试，王顶，408542507@qq.com 示例参考： 转到对话框 jsnotepad 关于对话框 基本要求： 实现关于对话框 关于对话框的样式、内容以及功能参考 win10 的记事本程序 编写测试页面，测试关于对话框，如下图所示： 图：关于对话框组件测试，王顶，408542507@qq.com 示例参考： 关于对话框 jsnotepad 查找对话框 基本要求： 实现查找对话框 查找对话框的样式以及功能参考 win10 的记事本程序 编写测试页面，测试查找对话框 示例参考： 查找对话框 jsnotepad 查找替换对话框 基本要求： 实现查找替换对话框 查找替换对话框的样式以及功能参考 win10 的记事本程序 编写测试页面，测试查找替换对话框 示例参考： 查找替换对话框 jsnotepad 列表框组件 基本要求： 实现字体对话框中的列表框组件 列表框组件的样式以及功能参考 win10 的记事本程序 编写测试页面，测试列表框组件，如下图所示 图：列表框组件测试，王顶，408542507@qq.com 示例参考： 列表框组件 jsnotepad 字体对话框 基本要求： 实现字体对话框 字体对话框的样式以及功能参考 win10 的记事本程序 编写测试页面，测试字体对话框 示例参考： 字体对话框 jsnotepad 状态栏 基本要求： 实现状态栏 状态栏的样式、内容以及功能参考 win10 的记事本程序 编写测试页面，测试状态栏组件 示例参考： 状态栏组件 jsnotepad 菜单栏 基本要求： 实现菜单栏 菜单栏的样式、内容以及功能参考 win10 的记事本程序 编写测试页面，测试菜单栏组件 示例参考： 菜单栏组件 jsnotepad 文本编辑组件 基本要求： 实现主窗体区域的文本编辑组件 文本编辑组件的样式以及功能参考 win10 的记事本程序 编写测试页面，测试文本编辑组件 示例参考： 文本编辑组件 定时器按钮组件 基本要求： 在 spa 仓库创建 43-timer-button 目录 在之前封装的定时器按钮组件基础上 用 require.js 重新封装定时器按钮 修改测试页面，按需加载定时器按钮组件 示例参考： 定时器按钮-按需加载 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch08-spa-mvc.html":{"url":"chapters/ch08-spa-mvc.html","title":"第八章：SPA 和 MVC","keywords":"","body":"第 8 章：SPA 和 MVC 阅读参考资料 SPA MVC、MVP 和 MVVM 前端路由 URL 中的井号 前端路由 基本要求： 在 spa 仓库创建 51-fe-router 目录 页面中有一个 div 块，宽 200px，高 200px，水平居中，默认绿色 使用前端路由，例如：http://ip-addr:8080/#/red 控制页面中 div 的颜色 在 chrome 中测试这个程序，改变 URL 地址后面的颜色单词，观察 div 块的变化 点击浏览器的导航键，前进、后退，观察 div 块颜色的变化 示例参考： 前端路由 MVC 基本要求： 在 spa 仓库创建 52-mvc 目录 页面上品字摆放三个视图（View） 一个视图（View）作为控制器，利用滑杆控件改变整数 num，变化范围：[0-255] 另两个视图（View）用来可视化显示数值大小 其中一个视图用 DIV 块的大小来反映 num 另一个视图用 DIV 块的颜色来反映 num 用 MVC 框架实现整个程序，将后两个视图绑定到 num 上 num 变化时，通知后两个视图，改变 DIV 的大小和颜色 示例参考： MVC jsnotepad 外壳 基本要求： 实现 jsnotepad 外壳 index.html 文件 index.html 文件加载所有 UI 组件的 JS 和 CSS 文件 外壳页面加载完成后，在浏览器窗口依次显示：菜单栏、编辑器和状态栏三个组件 在菜单栏的特定菜单项中弹出相应的对话框组件 测试 jsnotepad jsnotepad 帮助菜单功能 基本要求： 实现 jsnotepad 帮助菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad jsnotepad 查看菜单功能 基本要求： 实现 jsnotepad 查看菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad jsnotepad 格式菜单功能 基本要求： 实现 jsnotepad 格式菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad jsnotepad 编辑菜单功能 基本要求： 实现 jsnotepad 编辑菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/ch09-data-storage.html":{"url":"chapters/ch09-data-storage.html","title":"第九章：数据存储","keywords":"","body":"第 9 章：数据存储 阅读参考资料 web storage 操作浏览器历史 浏览器数据库 IndexedDB 入门教程 localstorage 状态保持 在 spa 仓库创建 61-store-clicking 用 localstorage 保存按钮点击的次数 页面上按钮的文字中显示被点击的次数 测试程序，点击按钮，检查点击次数，刷新页面，看点击数是否清零 示例参考： 保存点击次数 localstorage 保存图片 在 spa 仓库创建 62-store-image 页面上文本框中输入图片的 URL 地址 点击保存按钮，将图片保存到 localstorage 中，并显示在页面上 测试程序，点击保存按钮，检查页面上是否有图片 刷新页面，看页面上的图片是否存在 示例参考： 保存图片 history 状态保持 在 spa 仓库创建 63-click-history 用 history 保存按钮点击的次数 页面上按钮的文字中显示被点击的次数 测试程序，点击按钮，检查点击次数，刷新页面，看点击数是否清零 点击浏览器的导航键，前进、后退，观察按钮文字的变化 示例参考： 保存点击次数 jsnotepad 状态保持 基本要求： 保存 jsnotepad 应用的状态，用户下次访问应用时，能够恢复到上次退出时的状态 状态包括： 编辑器中的文本内容 编辑器中的文本字体、样式、字号 编辑器中光标的位置 编辑器是否换行 是否显示状态栏 jsnotepad 文件菜单功能 基本要求： 实现 jsnotepad 文件菜单下各菜单项的相应功能 菜单项的功能参考 win10 的记事本程序 测试 jsnotepad © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/setup-dev-env.html":{"url":"chapters/setup-dev-env.html","title":"搭建 Node.js 开发环境","keywords":"","body":"搭建 Node.js 开发环境 本文档基于 Linux CentOS 7 发行版，搭建基于命令行的 Node.js 开发环境。下面的安装步骤，如果没有特殊说明，一定不要在 root 账户下操作。 下载软件包 在 Win10 操作系统下载下列软件包： 从腾讯软件中心下载 VMWare Worksation Pro 最新版 从腾讯软件中心下载 XShell 最新版 从 CentOS 官网下载 CentOS 安装镜像包 安装软件包 在 Win10 操作系统安装下列软件包： 安装 VMWare Workstation 安装 XShell 安装 Linux 虚拟机 创建空白虚拟机 运行 vmware workstation pro 软件，创建一个空白虚拟机，操作如下： vmware 软件窗口中点击“创建新的虚拟机”按钮 出现新建虚拟机向导对话框 您希望选择什么类型的配置，选择“自定义（高级）”，点击“下一步”按钮 虚拟机硬件兼容性配置，使用默认设置，点击“下一步”按钮 安装来源，选择“稍后安装操作系统”来创建一个空白的虚拟机，点击“下一步”按钮 客户端操作系统，选择“Linux”，版本，选择“CentOS 64位”，点击“下一步”按钮 虚拟机名称和位置，使用默认设置或者自己定义，点击“下一步”按钮 处理器配置，使用默认设置：1 个 CPU 1 个内核，点击“下一步”按钮 内存配置，使用默认设置：1024 M（1G 内存），点击“下一步”按钮 网络连接配置，使用默认设置：使用网络地址转换（NAT），点击“下一步”按钮 I/O 控制器类型，使用默认设置：LSI Logic（推荐），点击“下一步”按钮 选择磁盘，使用默认设置：创建新虚拟磁盘，点击“下一步”按钮 指定磁盘容量，使用默认设置：20 G，并选择“将虚拟磁盘存储为单个文件”，点击“下一步”按钮 磁盘文件名称：使用默认设置，点击“下一步”按钮 已经准备好虚拟机，点击“完成”按钮 设置虚拟机硬件 在刚创建的空白虚拟机上，需要进一步编辑虚拟机设置，操作如下： 移除声卡硬件 移除 USB 控制器硬件 移除打印机硬件 CD/DVD 使用 ISO 镜像文件：点击“浏览”按钮，找到下载的 CentOS ISO 镜像文件 指定显示器设置，配置监视器器的分辨率为：1024 X 768 最后，点击“确定”按钮，完成虚拟机硬件设置 安装操作系统 点击“开启虚拟机”绿色三角按钮，虚拟机窗口出现电脑自检画面，安装向导界面中，进行如下操作设置： 【有待完善】 第一个安装画面：选择安装 CentOS 7 语言：中文 安全策略：Common Profile for General-Purpose Systems 软件选择： 安装介质 安装位置 网络启用 root 密码 创建新用户并设置密码，把新用户加到管理员组中 设置虚拟机 IP 地址 【有待完善】 通过 XShell 连接 Linux 虚拟机 【有待完善】 此后的所有安装步骤都是在 Linux 虚拟机中进行操作。 安装 vim 8 # 安装工具软件和依赖库 sudo yum install -y ruby ruby-devel lua lua-devel luajit wget unzip \\ luajit-devel ctags git python python-devel \\ python3 python3-devel tcl-devel ncurses-devel\\ perl perl-devel perl-ExtUtils-ParseXS \\ perl-ExtUtils-XSpp perl-ExtUtils-CBuilder \\ perl-ExtUtils-Embed # 切换到家目录 cd # 创建 GitHub 仓库根目录 mkdir repos cd repos # 下载 vim 源代码 wget https://github.com/vim/vim/archive/master.zip # 解压缩源代码 unzip master.zip # 切换到 vim 源代码目录 cd vim-master/src # 配置 vim ./configure --with-features=huge \\ --enable-multibyte \\ --enable-rubyinterp=yes \\ --enable-pythoninterp=yes \\ --with-python-config-dir=/usr/lib/python2.7/config \\ --enable-python3interp=yes \\ --with-python3-config-dir=/usr/lib/python3.5/config \\ --enable-perlinterp=yes \\ --enable-luainterp=yes \\ --enable-gui=gtk2 \\ --enable-cscope \\ --prefix=/usr/local # 编译软件 make VIMRUNTIMEDIR=/usr/local/share/vim/vim80 # 安装软件 sudo make install # 检查 vim 版本，应该是 8 vim --version 安装 node.js sudo yum install -y gcc-c++ make curl --location https://rpm.nodesource.com/setup_8.x | sudo bash - sudo yum install -y nodejs # 检查 node.js 安装是否成功 node -v # 检查 npm 是否安装成功 npm -v 安装 zsh zsh 的安装过程如下： # 查看当前的 shell echo $SHELL # 安装 zsh sudo yum install -y zsh # 安装 wget sudo yum install -y wget # 安装 oh-my-zsh wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh # 却换 bash 至 zsh sudo chsh -s /bin/zsh # 查新登录 shell exit # 连接 XShell，重新登录 Linux 检查命令行提示符变化 安装 vim 和 zsh 配置文件 安装完 vim 和 zsh 配置文件后，需要安装 zsh 插件。特别注意，安装 zsh 插件的过程不要中途退出，一定要等到出现命令行提示符再进行其他操作。 # 切换到 repos 目录 cd ~/repos # 克隆 wangding/tools 仓库 git clone https://github.com/wangding/tools # 安装配置文件 cd tools ./install.sh # 检查配置文件 ls -al ~ # .vimrc 文件应该存在 # .zshrc 文件应该存在 # 安装 zsh 插件，注意安装过程不要中途退出，一定要等到出现命令行提示符再进行其他操作 zsh # 退出当前 Shell exit # 连接 XShell，重新登录 Linux，zsh 的主题和插件都应该安装成功 安装 vim 插件管理工具 Vundle mkdir -p ~/.vim/bundle cd ~/.vim/bundle git clone https://github.com/VundleVim/Vundle.vim.git 安装 vim 插件 注意：安装 vim 插件的过程，不要中途退出，一定要等到所有插件都安装完成后，再进行其他操作。安装插件的过程如下图所示。 # 运行 vim 编辑器 vim # 安装 vim 插件 :PluginInstall # 退出 vim 插件安装 :q # 退出 vim :q 图：vim 插件的安装过程：王顶，408542507@qq.com 安装 tern_for_vim 的第三方依赖 # 切换到 tern_for_vim 目录 cd ~/.vim/bundle/tern_for_vim # 安装第三方依赖 npm Install 安装 YCM # 安装开发工具 sudo yum install -y automake gcc gcc-c++ kernel-devel cmake python-devel python3-devel # 切换到 YCM 目录 cd ~/.vim/bundle/YouCompleteMe # 安装 YCM install.py --tern-completer 安装开发辅助工具 su // 切换到 root 账户 yum install -y tree python-pygments // 安装 Linux 命令行 tree 工具和语法高亮工具 npm i -g htmlhint // 安装 HTMLHint 静态代码检查工具 npm i -g csslint // 安装 CSSLint 静态代码检查工具 npm i -g eslint // 安装 ESLint 静态代码检查工具 npm i -g browser-sync // 安装热加载工具 su wangding // 切换到开发者账户 检查开发辅助工具 tree /boot // 应该看到 boot 目录的树状结构 htmlhint --version // 应该看到版本号：0.9.13 或以上 csslint --version // 应该看到版本号：v1.0.4 或以上 eslint --version // 应该看到版本号：v4.17.0 或以上 browser-sync --version // 应该看到版本号：2.23.6 或以上 检查 vim 插件 验证 JavaScript 代码补全插件，操作步骤如下： cd mkdir test cd test touch .tern-project vim .tern-project .tern-project 文件的内容如下： { \"libs\": [\"browser\", \"jquery\"], \"plugins\": { \"node\": {} } } vim a.js i // 进入 vim 的插入模式 window. // 输入 window 然后按 . 看一下是否有 window 对象的属性、方法列出 Tab // 按键盘 tab 键，在 window 对象的属性、方法上切换 ( // 切换到 Date 按左括号 (，移动光标到行尾，输入分号 ; Enter X 2 // 按两次回车键 $. // 输入 $ 然后按 . 看一下是否有 JQuery $ 对象的属性、方法列出 // 如果没有自动补全的列表，删除 . 重新输入 . 再一两次 // 切换到 isArray 按左括号 (，移动光标到行尾，输入分号 ; Enter X 2 // 按两次回车键 process. // 输入 process 然后按 . 看一下是否有 process 对象的属性、方法列出 // 输入 ar，tab 键选择 argv，输入分号 ; :q! // 不保存退出 验证 emmet vim 插件，操作步骤如下： vim a.html // 命令行打开 vim 编辑器 i // 进入插入模式 !+y, // 输入感叹号，然后同时按 ctrl 和 y 键，然后按逗号键 // vim 窗口中应该出现 HTML5 的页面框架代码 :q! // 不保存退出 验证 jsdoc vim 插件，操作步骤如下： vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 x + y 的 add 加法函数，代码如下 function add(x, y) { return x + y; } ESC // 退出插入模式，进入普通模式，移动光标到第一行 :JsDoc // 按冒号进入命令模式，输入 JsDoc，注意命令大小写不要写错 // vim 窗口中应该出现函数头注释框架 :q! // 不保存退出 验证 CSS 代码补全功能，操作步骤如下： vim a.css // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 body 的 CSS 样式代码，如下： body { background: // 注意在输入冒号和空格之后，应该弹出代码补全窗口 ESC // 回到普通模式 :q! // 不保存退出 © 2019 王顶. All rights reserved.本站访客数 人次"},"chapters/mocha-dev-env.html":{"url":"chapters/mocha-dev-env.html","title":"升级开发环境","keywords":"","body":"升级开发环境 Mocha 虚拟机开发环境，可以完成 Node.js 后端开发。下面的安装步骤将使这个开发环境具备前端开发能力。另外，Node.js 后端开发环境也需要进行升级。 在确保自己的虚拟机能上网的前提下，执行以下搭建前端开发环境的步骤： 更新 tools 仓库 cd cd wd rm -rf tools git clone https://github.com/wangding/tools 安装 tools 仓库的 vim 配置文件 cd cd wd/tools ./install.sh 安装 zsh 插件 cd zsh // 安装 zsh 插件 exit // 退出终端窗口，重新进入 安装 vim 插件 vim // 命令行打开 vim 编辑器 :PluginInstall // vim 的普通模式下，按冒号进入命令模式 // 输入 PluginInstall 命令，注意命令的大小写 :q // vim 提示 Done 时，:q 退出安装界面 :q // 退出 vim 图：vim-plugin-install 验证安装的 emmet vim 插件 vim a.html // 命令行打开 vim 编辑器 i // 进入插入模式 !+y, // 输入感叹号，然后同时按 ctrl 和 y 键，然后按逗号键 // vim 窗口中应该出现 HTML5 的页面框架代码 :q! // 不保存退出 验证安装的 jsdoc vim 插件 vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 x + y 的 add 加法函数，代码如下 function add(x, y) { return x + y; } ESC // 退出插入模式，进入普通模式，移动光标到第一行 :JsDoc // 按冒号进入命令模式，输入 JsDoc，注意命令大小写不要写错 // vim 窗口中应该出现函数头注释框架 :q! // 不保存退出 验证 CSS 代码补全功能 vim a.css // 命令行打开 vim 编辑器 i // 进入插入模式 // 写一个 body 的 CSS 样式代码，如下： body { background: // 注意在输入冒号和空格之后，应该弹出代码补全窗口 ESC // 回到普通模式 :q! // 不保存退出 安装开发辅助工具 su // 切换到 root 账户 yum install -y tree python-pygments // 安装 Linux 命令行 tree 工具和语法高亮工具 npm i -g htmlhint // 安装 HTMLHint 静态代码检查工具 npm i -g csslint // 安装 CSSLint 静态代码检查工具 npm i -g eslint // 安装 ESLint 静态代码检查工具 npm i -g browser-sync // 安装热加载工具 su wangding // 切换到开发者账户 验证开发辅助工具 tree ~/wd // 应该看到 wd 目录的树状结构 htmlhint --version // 应该看到版本号：0.9.13 csslint --version // 应该看到版本号：v1.0.4 eslint --version // 应该看到版本号：v4.17.0 browser-sync --version // 应该看到版本号：2.23.6 验证 JavaScript 前端代码自动补全 cd ~/spa vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 window. // 输入 window 和点之后看到浏览器窗口对象 window 的方法提示 ESC // 回到普通模式 :q! // 不保存退出 vim a.js // 命令行打开 vim 编辑器 i // 进入插入模式 $. // 输入 $ 和点之后看到 jQuery 全局对象 $ 的方法提示 ESC // 回到普通模式 :q! // 不保存退出 安装 nvm 并升级 node.js 版本 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash 上面的安装步骤结束后，编辑 .zshrc 文件，执行命令：vi ~/.zshrc。在 zshrc 文件的最后增加下面两行代码： export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm 升级 Node.js 版本到 8.11.3，执行下面的命令： node -v // 当前的 Node.js 版本应该是 6 nvm install 8 node -v // 升级后 Node.js 版本应该是 8 掌握工具用法 Emmet 工具 安装 Emmet vim 插件，上面的开发环境搭建已经介绍过了 Emmet 工具在 vim 编辑器中的快捷键：+y, Emmet 语法，请参考：https://docs.emmet.io/abbreviations/syntax/ Emmet vim 插件用法，请参考：https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL 掌握 Emmet vim 常用的快捷键，+y，逗号，d，a，m，k，/，n 创建一个 emmet.html 文件，在 vim 中打开此文件，练习 Emmet 插件的用法 静态代码检查工具 安装静态代码检查工具，上面的开发环境搭建已经介绍过了 HTML 静态代码检查的规则，请参考：https://segmentfault.com/a/1190000013276858 CSS 静态代码检查的规则，请参考：https://github.com/CSSLint/csslint/wiki/Rules JavaScript 静态代码检查的规则，请参考：http://eslint.cn/docs/rules/ 创建 HTML、CSS 和 JavaScript 三个代码文件，在 vim 中编辑代码，体验静态代码检查插件的用法 热加载工具 安装热加载工具，上面的开发环境搭建已经介绍过了 执行如下操作，掌握热加载工具的用法： cd ~/spa // 进入前端页面所在的目录 lrd // 运行热加载程序，热加载程序会启动一个 Web 静态文件服务 // 在 XShell 另一个控制台窗口编写代码 vi index.html i // 进入插入模式 ! ctrl + y, // 产生 H5 页面框架代码 ESC // 从插入模式回到普通模式 w // 同时按下空格和 w 键，保存代码 打开 win10 的 chrome 浏览器 输入热加载程序提示的 URL 地址 chrome 浏览器中应该能看到刚才编写的页面代码 修改网页代码，保存，chrome 浏览器会自动刷新 通过热加载，浏览器能实时反映出页面的最新变化 不用手动刷新，提高开发效率 退出热加载按 Ctrl + C © 2019 王顶. All rights reserved.本站访客数 人次"}}